/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-363
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface ComposeDBSrvDef {
    contractor_details: (cid: string, callParams: CallParams$$<'cid'>) => { composedb: { directions: { ceramic_port: string; express_port: string; n: string; namespace: string; }; indexes: { composite: string; model: string; name: string; port: string; }[]; public_info: { eth_address: string; public_encryption_key: string; }; }; } | Promise<{ composedb: { directions: { ceramic_port: string; express_port: string; n: string; namespace: string; }; indexes: { composite: string; model: string; name: string; port: string; }[]; public_info: { eth_address: string; public_encryption_key: string; }; }; }>;
    info: (cid: string, callParams: CallParams$$<'cid'>) => string | Promise<string>;
}
export function registerComposeDBSrv(service: ComposeDBSrvDef): void;
export function registerComposeDBSrv(serviceId: string, service: ComposeDBSrvDef): void;
export function registerComposeDBSrv(peer: FluencePeer, service: ComposeDBSrvDef): void;
export function registerComposeDBSrv(peer: FluencePeer, serviceId: string, service: ComposeDBSrvDef): void;
       

export function registerComposeDBSrv(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "ComposeDBSrv",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "contractor_details" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CdbContractorDetails",
                            "fields" : {
                                "composedb" : {
                                    "tag" : "struct",
                                    "name" : "CdbConfig",
                                    "fields" : {
                                        "directions" : {
                                            "tag" : "struct",
                                            "name" : "CdbDirections",
                                            "fields" : {
                                                "ceramic_port" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "express_port" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "n" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "namespace" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                }
                                            }
                                        },
                                        "indexes" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "struct",
                                                "name" : "CdbIndex",
                                                "fields" : {
                                                    "composite" : {
                                                        "tag" : "scalar",
                                                        "name" : "string"
                                                    },
                                                    "model" : {
                                                        "tag" : "scalar",
                                                        "name" : "string"
                                                    },
                                                    "name" : {
                                                        "tag" : "scalar",
                                                        "name" : "string"
                                                    },
                                                    "port" : {
                                                        "tag" : "scalar",
                                                        "name" : "string"
                                                    }
                                                }
                                            }
                                        },
                                        "public_info" : {
                                            "tag" : "struct",
                                            "name" : "CdbPublicInfo",
                                            "fields" : {
                                                "eth_address" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "public_encryption_key" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "info" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "cid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 
export type ReadResult = { composedb: { directions: { ceramic_port: string; express_port: string; n: string; namespace: string; }; indexes: { composite: string; model: string; name: string; port: string; }[]; public_info: { eth_address: string; public_encryption_key: string; }; }; }
export function read(
    peer_id: string,
    service_id: string,
    cid: string,
    config?: {ttl?: number}
): Promise<ReadResult>;

export function read(
    peer: FluencePeer,
    peer_id: string,
    service_id: string,
    cid: string,
    config?: {ttl?: number}
): Promise<ReadResult>;

export function read(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id (service_id "contractor_details") [cid] s)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [s])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "read",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CdbContractorDetails",
                    "fields" : {
                        "composedb" : {
                            "tag" : "struct",
                            "name" : "CdbConfig",
                            "fields" : {
                                "directions" : {
                                    "tag" : "struct",
                                    "name" : "CdbDirections",
                                    "fields" : {
                                        "ceramic_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "express_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "n" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "namespace" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                },
                                "indexes" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "CdbIndex",
                                        "fields" : {
                                            "composite" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "model" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "port" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                },
                                "public_info" : {
                                    "tag" : "struct",
                                    "name" : "CdbPublicInfo",
                                    "fields" : {
                                        "eth_address" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "public_encryption_key" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
