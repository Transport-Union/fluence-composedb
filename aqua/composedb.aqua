import Peer, PeerId from "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/registry/resources-api.aqua"
import "@fluencelabs/registry/registry-service.aqua"

import "./types.aqua"

service ComposeDBSrv("ComposeDBSrv"):
    init(namespace: string, n: string, indexes: []CdbIndex) -> string
    contractor_details(cid: string) -> CdbContractorDetails
    has_intermediary(user_address: string, cid: string) -> []CdbIntermediary
    store_intermediary(intermediary: CdbIntermediary, cid: string) -> []CdbIntermediary
    deploy_index(index: CdbIndex, cid: string) -> string
    query(query: string, connection: CdbConnection, cid: string) -> CeramicResult
    mutate(display_name: string, account_id: string, cap: string, connection: CdbConnection, cid: string) -> CeramicResult
    serve(index: CdbIndex, cid: string) -> CdbConnection
    connect(index: CdbIndex, cap: string, cid: string) -> CdbConnection

func cdbInit(resource_id: ResourceId,  peer_id: PeerId, service_id: ?string, namespace: string, n: string, indexes: []CdbIndex) -> string, *string, *CdbConnection, bool, *Error:

    results: *string
    connections: *CdbConnection

    on peer_id: 

        ComposeDBSrv service_id!
        -- store contractor details on ipfs and return cid
        cid <- ComposeDBSrv.init(namespace, n, indexes)

        for i <- indexes: 
            -- deploy composite 
            results <- ComposeDBSrv.deploy_index(i, cid)
            connections <- ComposeDBSrv.serve(i, cid)

        success, errors <- registerService(resource_id, cid, peer_id, service_id)
   
    <- cid, results, connections, success, errors

func cdbConfirmAvailability(peer_id: PeerId, cid: string, service_id: ?string) :

        resource_id = "5zb7zPgUZTTvvJxT4E16sHo6CvguG9Rs2K91YAwGqiLM"

        on peer_id: 
            registerService(resource_id, cid, peer_id, service_id)




func cdbContratorDetails(peer_id: string, service_id: string, cid: string) -> *string, bool, CdbContractorDetails:

    status: *string

    error: *string
    success: *bool
    values: *CdbContractorDetails
     
    on peer_id:

        ComposeDBSrv service_id

        values <- ComposeDBSrv.contractor_details(cid)
        status <<- "ok"

    par status <- Peer.timeout(3000, "timeout") 

    if status! == "timeout":
        success <<- false
        error <<- status! 
    else: 
        success <<- true

    <- error, success!, values!



func cdbHasIntermediary(peer_id: string, service_id: string, user_address: string, cid: string) -> []CdbIntermediary:

    msg: *[]CdbIntermediary

    on peer_id: 

      ComposeDBSrv service_id
      msg <- ComposeDBSrv.has_intermediary(user_address, cid)

    <- msg!

func cdbStoreIntermediary(peer_id: string, service_id: string, intermediary: CdbIntermediary, cid: string) -> []CdbIntermediary:

    msg: *[]CdbIntermediary

    on peer_id: 

      ComposeDBSrv service_id
      msg <- ComposeDBSrv.store_intermediary(intermediary, cid)

    <- msg!


func cdbConnect(peer_id: PeerId, service_id: string, index: CdbIndex, cap: string, cid: string) -> CdbConnection:

    on peer_id: 

        ComposeDBSrv service_id
        c <- ComposeDBSrv.connect(index, cap, cid)

    <- c

func cdbQuery(node: string, service_id: string, query: string, connection: CdbConnection, cid: string) -> CeramicResult:

    on node:

        ComposeDBSrv service_id
        ref <- ComposeDBSrv.query(query, connection, cid)

    <- ref

func cdbMutate(node: string, service_id: string, display_name: string, account_id: string, cap: string, connection: CdbConnection, cid: string) -> CeramicResult:

    on node:

        ComposeDBSrv service_id
        res <- ComposeDBSrv.mutate(display_name, account_id, cap, connection, cid)

    <- res 




