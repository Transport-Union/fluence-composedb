import Peer, PeerId from "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/registry/resources-api.aqua"
import "@fluencelabs/registry/registry-service.aqua"

import "./types.aqua"

service ComposeDBSrv("ComposeDBSrv"):
    init(namespace: string, n: string, indexes: string, pk: string) -> string
    contractor_details(cid: string) -> CdbContractorDetails
    query(cid: string, definition: string, query: string) -> CdbResult
    mutate(cid: string, definition: string, query: string, session: string) -> CdbResult

service TUComposeDBSrv("TUComposeDBSrv"):
    query() -> CeramicResult

func cdbInit(resource_id: ResourceId,  peer_id: PeerId, service_id: ?string, namespace: string, n: string, indexes: string, pk: string) -> string, bool, *Error:

    results: *string
    connections: *CdbConnection

    on peer_id: 

        ComposeDBSrv service_id!
        -- store contractor details on ipfs and return cid
        cid <- ComposeDBSrv.init(namespace, n, indexes, pk)

        success, errors <- registerService(resource_id, cid, peer_id, service_id)
   
    <- cid, success, errors

func cdbReregister(peer_id: PeerId, service_id: ?string, cid: string) -> bool, *Error:

    resource_id = "5zb7zPgUZTTvvJxT4E16sHo6CvguG9Rs2K91YAwGqiLM"

    on peer_id: 

        success, errors <- registerService(resource_id, cid, peer_id, service_id)

    <- success, errors



func cdbConfirmAvailability(peer_id: PeerId, cid: string, service_id: ?string) :

    resource_id = "5zb7zPgUZTTvvJxT4E16sHo6CvguG9Rs2K91YAwGqiLM"

    on peer_id: 
        registerService(resource_id, cid, peer_id, service_id)




func cdbContratorDetails(peer_id: string, service_id: string, cid: string) -> *string, bool, CdbContractorDetails:

    status: *string

    error: *string
    success: *bool
    values: *CdbContractorDetails
     
    on peer_id:

        ComposeDBSrv service_id

        values <- ComposeDBSrv.contractor_details(cid)
        status <<- "ok"

    par status <- Peer.timeout(3000, "timeout") 

    if status! == "timeout":
        success <<- false
        error <<- status! 
    else: 
        success <<- true

    <- error, success!, values!

func cdbQuery(node: string, service_id: string, contractor_cid: string, definition: string, query: string) -> *string, bool, CdbResult:

    status: *string

    error: *string
    success: *bool
    values: *CdbResult

    on node:

        ComposeDBSrv service_id
        values <- ComposeDBSrv.query(contractor_cid, definition, query)
        status <<- "ok"

    par status <- Peer.timeout(20000, "timeout") 

    if status! == "timeout":
        success <<- false
        error <<- status! 
    else: 
        success <<- true

    <- error, success!, values!

func cdbMutate(node: string, service_id: string, cid: string, definition: string, query: string, session: string) -> *string, bool, CdbResult:

    status: *string

    error: *string
    success: *bool
    values: *CdbResult

    on node:

        ComposeDBSrv service_id
        values <- ComposeDBSrv.mutate(cid, definition, query, session)
        status <<- "ok"

    par status <- Peer.timeout(20000, "timeout") 

    if status! == "timeout":
        success <<- false
        error <<- status! 
    else: 
        success <<- true

    <- error, success!, values! 

-- func cdbQueryTest(node: string) -> CeramicResult:

--     on node: 

--         TUComposeDBSrv "ef27fbd9-359e-4efc-aad2-19606182c8c6"
--         ref <- TUComposeDBSrv.query()

--     <- ref





