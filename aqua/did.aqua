data CeramicResult:
    ret_code: i32
    stderr: string
    stdout: string



service HippocampusSrv("HippocampusSrv"):
    glaze_did_create() -> CeramicResult
    glaze_did_inspect_with_key(key: string, ceramic_url: string) -> CeramicResult
    glaze_tile_create(did: string, ceramic_url: string, payload: string) -> CeramicResult
    glaze_tile_content(streamId: string, ceramic_url: string) -> CeramicResult
    glaze_stream_state(streamId: string, ceramic_url: string) -> CeramicResult
    glaze_stream_commits(streamId: string, ceramic_url: string) -> CeramicResult


-- route should include peer, service_id + ceramic_url 
func didNew(node: string, service_id: string) -> CeramicResult:

    on node:

        HippocampusSrv service_id

        answer <- HippocampusSrv.glaze_did_create()   
        -- answer <- HippocampusSrv.glaze_did_inspect_with_key(seed, ceramic_url)  
        -- answer <- HippocampusSrv.glaze_stream_state(streamId, ceramic_url) 

    <- answer

func tileCreate(node: string, service_id: string, ceramic_url: string, seed: string, content: string) -> CeramicResult:

    on node: 

        HippocampusSrv service_id

        res <- HippocampusSrv.glaze_tile_create(seed, ceramic_url, content)

    <- res

func tileContent(node: string, service_id: string, ceramic_url: string, streamId: string) -> CeramicResult:

    on node: 

        HippocampusSrv service_id

        res <- HippocampusSrv.glaze_tile_content(streamId, ceramic_url)

    <- res

func streamState(node: string, service_id: string, ceramic_url: string, streamId: string) -> CeramicResult:

    on node: 

        HippocampusSrv service_id

        res <- HippocampusSrv.glaze_stream_state(streamId, ceramic_url)

    <- res

func streamCommits(node: string, service_id: string, ceramic_url: string, streamId: string) -> CeramicResult:

    on node: 

        HippocampusSrv service_id

        res <- HippocampusSrv.glaze_stream_commits(streamId, ceramic_url)

    <- res