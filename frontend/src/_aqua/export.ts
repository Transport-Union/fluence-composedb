/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.8.0-368
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

// Functions
 
export type CdbMutateResult = [string[], boolean, { content: string; count: number; error: string; success: boolean; }]
export function cdbMutate(
    node: string,
    service_id: string,
    cid: string,
    definition: string,
    query: string,
    session: string,
    config?: {ttl?: number}
): Promise<CdbMutateResult>;

export function cdbMutate(
    peer: FluencePeer,
    node: string,
    service_id: string,
    cid: string,
    definition: string,
    query: string,
    session: string,
    config?: {ttl?: number}
): Promise<CdbMutateResult>;

export function cdbMutate(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (call %init_peer_id% ("getDataSrv" "node") [] node)
                            )
                            (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                          )
                          (call %init_peer_id% ("getDataSrv" "definition") [] definition)
                         )
                         (call %init_peer_id% ("getDataSrv" "query") [] query)
                        )
                        (call %init_peer_id% ("getDataSrv" "session") [] session)
                       )
                       (new $values
                        (new $status
                         (new $success
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (par
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (xor
                                  (seq
                                   (seq
                                    (call node (service_id "mutate") [cid definition query session] $values)
                                    (ap "ok" $status)
                                   )
                                   (call -relay- ("op" "noop") [])
                                  )
                                  (seq
                                   (call -relay- ("op" "noop") [])
                                   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                  )
                                 )
                                )
                                (call %init_peer_id% ("peer" "timeout") [20000 "timeout"] $status)
                               )
                               (xor
                                (seq
                                 (seq
                                  (new $status_test
                                   (seq
                                    (seq
                                     (seq
                                      (call %init_peer_id% ("math" "add") [0 1] status_incr)
                                      (fold $status s
                                       (seq
                                        (seq
                                         (ap s $status_test)
                                         (canon %init_peer_id% $status_test  #status_iter_canon)
                                        )
                                        (xor
                                         (match #status_iter_canon.length status_incr
                                          (null)
                                         )
                                         (next s)
                                        )
                                       )
                                       (never)
                                      )
                                     )
                                     (canon %init_peer_id% $status_test  #status_result_canon)
                                    )
                                    (ap #status_result_canon status_gate)
                                   )
                                  )
                                  (ap status_gate.$.[0]! status_gate-0)
                                 )
                                 (match status_gate-0 "timeout"
                                  (xor
                                   (seq
                                    (seq
                                     (seq
                                      (ap false $success)
                                      (new $status_test-0
                                       (seq
                                        (seq
                                         (seq
                                          (call %init_peer_id% ("math" "add") [0 1] status_incr-0)
                                          (fold $status s
                                           (seq
                                            (seq
                                             (ap s $status_test-0)
                                             (canon %init_peer_id% $status_test-0  #status_iter_canon-0)
                                            )
                                            (xor
                                             (match #status_iter_canon-0.length status_incr-0
                                              (null)
                                             )
                                             (next s)
                                            )
                                           )
                                           (never)
                                          )
                                         )
                                         (canon %init_peer_id% $status_test-0  #status_result_canon-0)
                                        )
                                        (ap #status_result_canon-0 status_gate-1)
                                       )
                                      )
                                     )
                                     (ap status_gate-1.$.[0]! status_gate-1-0)
                                    )
                                    (ap status_gate-1-0 $error)
                                   )
                                   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                  )
                                 )
                                )
                                (ap true $success)
                               )
                              )
                              (new $success_test
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [0 1] success_incr)
                                  (fold $success s
                                   (seq
                                    (seq
                                     (ap s $success_test)
                                     (canon %init_peer_id% $success_test  #success_iter_canon)
                                    )
                                    (xor
                                     (match #success_iter_canon.length success_incr
                                      (null)
                                     )
                                     (next s)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $success_test  #success_result_canon)
                                )
                                (ap #success_result_canon success_gate)
                               )
                              )
                             )
                             (ap success_gate.$.[0]! success_gate-0)
                            )
                            (new $values_test
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("math" "add") [0 1] values_incr)
                                (fold $values s
                                 (seq
                                  (seq
                                   (ap s $values_test)
                                   (canon %init_peer_id% $values_test  #values_iter_canon)
                                  )
                                  (xor
                                   (match #values_iter_canon.length values_incr
                                    (null)
                                   )
                                   (next s)
                                  )
                                 )
                                 (never)
                                )
                               )
                               (canon %init_peer_id% $values_test  #values_result_canon)
                              )
                              (ap #values_result_canon values_gate)
                             )
                            )
                           )
                           (ap values_gate.$.[0]! values_gate-0)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $error  #error_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#error_canon success_gate-0 values_gate-0])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbMutate",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "definition" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "query" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "session" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "scalar",
                    "name" : "bool"
                },
                {
                    "tag" : "struct",
                    "name" : "CdbResult",
                    "fields" : {
                        "content" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "count" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        },
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbQueryResult = [string[], boolean, { content: string; count: number; error: string; success: boolean; }]
export function cdbQuery(
    node: string,
    service_id: string,
    contractor_cid: string,
    definition: string,
    query: string,
    config?: {ttl?: number}
): Promise<CdbQueryResult>;

export function cdbQuery(
    peer: FluencePeer,
    node: string,
    service_id: string,
    contractor_cid: string,
    definition: string,
    query: string,
    config?: {ttl?: number}
): Promise<CdbQueryResult>;

export function cdbQuery(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "node") [] node)
                           )
                           (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "contractor_cid") [] contractor_cid)
                         )
                         (call %init_peer_id% ("getDataSrv" "definition") [] definition)
                        )
                        (call %init_peer_id% ("getDataSrv" "query") [] query)
                       )
                       (new $values
                        (new $status
                         (new $success
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (par
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (xor
                                  (seq
                                   (seq
                                    (call node (service_id "query") [contractor_cid definition query] $values)
                                    (ap "ok" $status)
                                   )
                                   (call -relay- ("op" "noop") [])
                                  )
                                  (seq
                                   (call -relay- ("op" "noop") [])
                                   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                  )
                                 )
                                )
                                (call %init_peer_id% ("peer" "timeout") [20000 "timeout"] $status)
                               )
                               (xor
                                (seq
                                 (seq
                                  (new $status_test
                                   (seq
                                    (seq
                                     (seq
                                      (call %init_peer_id% ("math" "add") [0 1] status_incr)
                                      (fold $status s
                                       (seq
                                        (seq
                                         (ap s $status_test)
                                         (canon %init_peer_id% $status_test  #status_iter_canon)
                                        )
                                        (xor
                                         (match #status_iter_canon.length status_incr
                                          (null)
                                         )
                                         (next s)
                                        )
                                       )
                                       (never)
                                      )
                                     )
                                     (canon %init_peer_id% $status_test  #status_result_canon)
                                    )
                                    (ap #status_result_canon status_gate)
                                   )
                                  )
                                  (ap status_gate.$.[0]! status_gate-0)
                                 )
                                 (match status_gate-0 "timeout"
                                  (xor
                                   (seq
                                    (seq
                                     (seq
                                      (ap false $success)
                                      (new $status_test-0
                                       (seq
                                        (seq
                                         (seq
                                          (call %init_peer_id% ("math" "add") [0 1] status_incr-0)
                                          (fold $status s
                                           (seq
                                            (seq
                                             (ap s $status_test-0)
                                             (canon %init_peer_id% $status_test-0  #status_iter_canon-0)
                                            )
                                            (xor
                                             (match #status_iter_canon-0.length status_incr-0
                                              (null)
                                             )
                                             (next s)
                                            )
                                           )
                                           (never)
                                          )
                                         )
                                         (canon %init_peer_id% $status_test-0  #status_result_canon-0)
                                        )
                                        (ap #status_result_canon-0 status_gate-1)
                                       )
                                      )
                                     )
                                     (ap status_gate-1.$.[0]! status_gate-1-0)
                                    )
                                    (ap status_gate-1-0 $error)
                                   )
                                   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                  )
                                 )
                                )
                                (ap true $success)
                               )
                              )
                              (new $success_test
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [0 1] success_incr)
                                  (fold $success s
                                   (seq
                                    (seq
                                     (ap s $success_test)
                                     (canon %init_peer_id% $success_test  #success_iter_canon)
                                    )
                                    (xor
                                     (match #success_iter_canon.length success_incr
                                      (null)
                                     )
                                     (next s)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $success_test  #success_result_canon)
                                )
                                (ap #success_result_canon success_gate)
                               )
                              )
                             )
                             (ap success_gate.$.[0]! success_gate-0)
                            )
                            (new $values_test
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("math" "add") [0 1] values_incr)
                                (fold $values s
                                 (seq
                                  (seq
                                   (ap s $values_test)
                                   (canon %init_peer_id% $values_test  #values_iter_canon)
                                  )
                                  (xor
                                   (match #values_iter_canon.length values_incr
                                    (null)
                                   )
                                   (next s)
                                  )
                                 )
                                 (never)
                                )
                               )
                               (canon %init_peer_id% $values_test  #values_result_canon)
                              )
                              (ap #values_result_canon values_gate)
                             )
                            )
                           )
                           (ap values_gate.$.[0]! values_gate-0)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $error  #error_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#error_canon success_gate-0 values_gate-0])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbQuery",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "contractor_cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "definition" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "query" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "scalar",
                    "name" : "bool"
                },
                {
                    "tag" : "struct",
                    "name" : "CdbResult",
                    "fields" : {
                        "content" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "count" : {
                            "tag" : "scalar",
                            "name" : "u64"
                        },
                        "error" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbContratorDetailsResult = [string[], boolean, { composedb: { directions: { ceramic_port: string; express_port: string; n: string; namespace: string; }; indexes: { composite_definition: string; name: string; runtime_definition: string; }[]; public_info: { eth_address: string; public_encryption_key: string; }[]; }; }]
export function cdbContratorDetails(
    peer_id: string,
    service_id: string,
    cid: string,
    config?: {ttl?: number}
): Promise<CdbContratorDetailsResult>;

export function cdbContratorDetails(
    peer: FluencePeer,
    peer_id: string,
    service_id: string,
    cid: string,
    config?: {ttl?: number}
): Promise<CdbContratorDetailsResult>;

export function cdbContratorDetails(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                       )
                       (new $values
                        (new $status
                         (new $success
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (par
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (xor
                                  (seq
                                   (seq
                                    (call peer_id (service_id "contractor_details") [cid] $values)
                                    (ap "ok" $status)
                                   )
                                   (call -relay- ("op" "noop") [])
                                  )
                                  (seq
                                   (call -relay- ("op" "noop") [])
                                   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                  )
                                 )
                                )
                                (call %init_peer_id% ("peer" "timeout") [3000 "timeout"] $status)
                               )
                               (xor
                                (seq
                                 (seq
                                  (new $status_test
                                   (seq
                                    (seq
                                     (seq
                                      (call %init_peer_id% ("math" "add") [0 1] status_incr)
                                      (fold $status s
                                       (seq
                                        (seq
                                         (ap s $status_test)
                                         (canon %init_peer_id% $status_test  #status_iter_canon)
                                        )
                                        (xor
                                         (match #status_iter_canon.length status_incr
                                          (null)
                                         )
                                         (next s)
                                        )
                                       )
                                       (never)
                                      )
                                     )
                                     (canon %init_peer_id% $status_test  #status_result_canon)
                                    )
                                    (ap #status_result_canon status_gate)
                                   )
                                  )
                                  (ap status_gate.$.[0]! status_gate-0)
                                 )
                                 (match status_gate-0 "timeout"
                                  (xor
                                   (seq
                                    (seq
                                     (seq
                                      (ap false $success)
                                      (new $status_test-0
                                       (seq
                                        (seq
                                         (seq
                                          (call %init_peer_id% ("math" "add") [0 1] status_incr-0)
                                          (fold $status s
                                           (seq
                                            (seq
                                             (ap s $status_test-0)
                                             (canon %init_peer_id% $status_test-0  #status_iter_canon-0)
                                            )
                                            (xor
                                             (match #status_iter_canon-0.length status_incr-0
                                              (null)
                                             )
                                             (next s)
                                            )
                                           )
                                           (never)
                                          )
                                         )
                                         (canon %init_peer_id% $status_test-0  #status_result_canon-0)
                                        )
                                        (ap #status_result_canon-0 status_gate-1)
                                       )
                                      )
                                     )
                                     (ap status_gate-1.$.[0]! status_gate-1-0)
                                    )
                                    (ap status_gate-1-0 $error)
                                   )
                                   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                  )
                                 )
                                )
                                (ap true $success)
                               )
                              )
                              (new $success_test
                               (seq
                                (seq
                                 (seq
                                  (call %init_peer_id% ("math" "add") [0 1] success_incr)
                                  (fold $success s
                                   (seq
                                    (seq
                                     (ap s $success_test)
                                     (canon %init_peer_id% $success_test  #success_iter_canon)
                                    )
                                    (xor
                                     (match #success_iter_canon.length success_incr
                                      (null)
                                     )
                                     (next s)
                                    )
                                   )
                                   (never)
                                  )
                                 )
                                 (canon %init_peer_id% $success_test  #success_result_canon)
                                )
                                (ap #success_result_canon success_gate)
                               )
                              )
                             )
                             (ap success_gate.$.[0]! success_gate-0)
                            )
                            (new $values_test
                             (seq
                              (seq
                               (seq
                                (call %init_peer_id% ("math" "add") [0 1] values_incr)
                                (fold $values s
                                 (seq
                                  (seq
                                   (ap s $values_test)
                                   (canon %init_peer_id% $values_test  #values_iter_canon)
                                  )
                                  (xor
                                   (match #values_iter_canon.length values_incr
                                    (null)
                                   )
                                   (next s)
                                  )
                                 )
                                 (never)
                                )
                               )
                               (canon %init_peer_id% $values_test  #values_result_canon)
                              )
                              (ap #values_result_canon values_gate)
                             )
                            )
                           )
                           (ap values_gate.$.[0]! values_gate-0)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $error  #error_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#error_canon success_gate-0 values_gate-0])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbContratorDetails",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cid" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                },
                {
                    "tag" : "scalar",
                    "name" : "bool"
                },
                {
                    "tag" : "struct",
                    "name" : "CdbContractorDetails",
                    "fields" : {
                        "composedb" : {
                            "tag" : "struct",
                            "name" : "CdbConfig",
                            "fields" : {
                                "directions" : {
                                    "tag" : "struct",
                                    "name" : "CdbDirections",
                                    "fields" : {
                                        "ceramic_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "express_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "n" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "namespace" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                },
                                "indexes" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "CdbIndex",
                                        "fields" : {
                                            "composite_definition" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "name" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "runtime_definition" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                },
                                "public_info" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "CdbPublicInfo",
                                        "fields" : {
                                            "eth_address" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "public_encryption_key" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type GetRecordsResult = [{ metadata: { issued_by: string; issuer_signature: number[]; key_id: string; peer_id: string; relay_id: string[]; service_id: string[]; solution: number[]; timestamp_issued: number; value: string; }; signature: number[]; timestamp_created: number; }[] | null, string[]]
export function getRecords(
    resource_id: string,
    consistency_level: number,
    config?: {ttl?: number}
): Promise<GetRecordsResult>;

export function getRecords(
    peer: FluencePeer,
    resource_id: string,
    consistency_level: number,
    config?: {ttl?: number}
): Promise<GetRecordsResult>;

export function getRecords(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "resource_id") [] resource_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "consistency_level") [] consistency_level)
                       )
                       (new $records
                        (new $successful
                         (new $result
                          (seq
                           (seq
                            (xor
                             (seq
                              (seq
                               (seq
                                (seq
                                 (call -relay- ("op" "string_to_b58") [resource_id] k)
                                 (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                )
                                (par
                                 (fold nodes n-0
                                  (par
                                   (seq
                                    (xor
                                     (xor
                                      (seq
                                       (seq
                                        (call n-0 ("peer" "timestamp_sec") [] t)
                                        (call n-0 ("registry" "get_records") [resource_id t] get_result)
                                       )
                                       (xor
                                        (match get_result.$.success! true
                                         (seq
                                          (ap get_result.$.result! $records)
                                          (ap true $successful)
                                         )
                                        )
                                        (ap get_result.$.error! $error-0)
                                       )
                                      )
                                      (call n-0 ("op" "noop") [])
                                     )
                                     (seq
                                      (call -relay- ("op" "noop") [])
                                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                     )
                                    )
                                    (call -relay- ("op" "noop") [])
                                   )
                                   (next n-0)
                                  )
                                  (never)
                                 )
                                 (null)
                                )
                               )
                               (new $status
                                (new $result-0
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (seq
                                      (par
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (call -relay- ("math" "sub") [consistency_level 1] sub-0)
                                           (call -relay- ("math" "sub") [consistency_level 1] sub)
                                          )
                                          (new $successful_test
                                           (seq
                                            (seq
                                             (seq
                                              (call -relay- ("math" "add") [sub 1] successful_incr)
                                              (fold $successful s
                                               (seq
                                                (seq
                                                 (ap s $successful_test)
                                                 (canon -relay- $successful_test  #successful_iter_canon)
                                                )
                                                (xor
                                                 (match #successful_iter_canon.length successful_incr
                                                  (null)
                                                 )
                                                 (next s)
                                                )
                                               )
                                               (never)
                                              )
                                             )
                                             (canon -relay- $successful_test  #successful_result_canon)
                                            )
                                            (ap #successful_result_canon successful_gate)
                                           )
                                          )
                                         )
                                         (ap successful_gate.$.[sub-0]! successful_gate-0)
                                        )
                                        (ap "ok" $status)
                                       )
                                       (call -relay- ("peer" "timeout") [6000 "timeout"] $status)
                                      )
                                      (new $status_test
                                       (seq
                                        (seq
                                         (seq
                                          (call -relay- ("math" "add") [0 1] status_incr)
                                          (fold $status s
                                           (seq
                                            (seq
                                             (ap s $status_test)
                                             (canon -relay- $status_test  #status_iter_canon)
                                            )
                                            (xor
                                             (match #status_iter_canon.length status_incr
                                              (null)
                                             )
                                             (next s)
                                            )
                                           )
                                           (never)
                                          )
                                         )
                                         (canon -relay- $status_test  #status_result_canon)
                                        )
                                        (ap #status_result_canon status_gate)
                                       )
                                      )
                                     )
                                     (ap status_gate.$.[0]! status_gate-0)
                                    )
                                    (xor
                                     (match status_gate-0 "ok"
                                      (ap true $result-0)
                                     )
                                     (ap false $result-0)
                                    )
                                   )
                                   (new $result-0_test
                                    (seq
                                     (seq
                                      (seq
                                       (call -relay- ("math" "add") [0 1] result-0_incr)
                                       (fold $result-0 s
                                        (seq
                                         (seq
                                          (ap s $result-0_test)
                                          (canon -relay- $result-0_test  #result-0_iter_canon)
                                         )
                                         (xor
                                          (match #result-0_iter_canon.length result-0_incr
                                           (null)
                                          )
                                          (next s)
                                         )
                                        )
                                        (never)
                                       )
                                      )
                                      (canon -relay- $result-0_test  #result-0_result_canon)
                                     )
                                     (ap #result-0_result_canon result-0_gate)
                                    )
                                   )
                                  )
                                  (ap result-0_gate.$.[0]! result-0_gate-0)
                                 )
                                )
                               )
                              )
                              (xor
                               (match result-0_gate-0 false
                                (ap "timeout exceeded" $error-0)
                               )
                               (seq
                                (seq
                                 (canon -relay- $records  #records_canon)
                                 (call -relay- ("registry" "merge") [#records_canon] merged)
                                )
                                (xor
                                 (match merged.$.success! false
                                  (ap merged.$.error! $error-0)
                                 )
                                 (ap merged.$.result! $result)
                                )
                               )
                              )
                             )
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                            )
                            (canon %init_peer_id% $result  #-result-fix-0)
                           )
                           (ap #-result-fix-0 -result-flat-0)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $error-0  #error-0_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [-result-flat-0 #error-0_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getRecords",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "resource_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "consistency_level" : {
                    "tag" : "scalar",
                    "name" : "i16"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "array",
                        "type" : {
                            "tag" : "struct",
                            "name" : "Record",
                            "fields" : {
                                "metadata" : {
                                    "tag" : "struct",
                                    "name" : "RecordMetadata",
                                    "fields" : {
                                        "relay_id" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        },
                                        "issued_by" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "peer_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "timestamp_issued" : {
                                            "tag" : "scalar",
                                            "name" : "u64"
                                        },
                                        "service_id" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        },
                                        "value" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "key_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "solution" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "u8"
                                            }
                                        },
                                        "issuer_signature" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "u8"
                                            }
                                        }
                                    }
                                },
                                "signature" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "u8"
                                    }
                                },
                                "timestamp_created" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                }
                            }
                        }
                    }
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
