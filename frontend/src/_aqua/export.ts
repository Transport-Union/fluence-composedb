/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-363
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

// Functions
 
export type ExploreResult = [{ addresses: string[]; neighbors: string[]; peerId: string; public_peer: boolean | null; tested_connections: string[]; versions: { air_version: string; node_version: string; } | null; }, { addresses: string[]; neighbors: string[]; peerId: string; public_peer: boolean | null; tested_connections: string[]; versions: { air_version: string; node_version: string; } | null; }[]]
export function explore(
    peer_: string,
    config?: {ttl?: number}
): Promise<ExploreResult>;

export function explore(
    peer: FluencePeer,
    peer_: string,
    config?: {ttl?: number}
): Promise<ExploreResult>;

export function explore(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                       )
                       (new $addresses
                        (new $tested_connections
                         (new $po
                          (seq
                           (new $public_peer
                            (seq
                             (seq
                              (seq
                               (call -relay- ("op" "noop") [])
                               (xor
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (call peer ("peer" "identify") [] info)
                                    (fold info.$.external_addresses! a-0
                                     (seq
                                      (ap a-0 $addresses)
                                      (next a-0)
                                     )
                                    )
                                   )
                                   (call peer ("kad" "neighborhood") [peer [] []] neighbors)
                                  )
                                  (fold neighbors n-0
                                   (seq
                                    (new $n_addresses
                                     (new $status
                                      (new $versions
                                       (seq
                                        (seq
                                         (seq
                                          (par
                                           (xor
                                            (seq
                                             (call n-0 ("peer" "identify") [] n_info)
                                             (ap "ok" $status)
                                            )
                                            (seq
                                             (seq
                                              (call -relay- ("op" "noop") [])
                                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                             )
                                             (call -relay- ("op" "noop") [])
                                            )
                                           )
                                           (call peer ("peer" "timeout") [5000 "timeout"] $status)
                                          )
                                          (xor
                                           (seq
                                            (new $status_test
                                             (seq
                                              (fold $status s
                                               (seq
                                                (seq
                                                 (seq
                                                  (call peer ("math" "add") [0 1] incr_idx)
                                                  (ap s $status_test)
                                                 )
                                                 (canon peer $status_test  #status_iter_canon)
                                                )
                                                (xor
                                                 (match #status_iter_canon.length incr_idx
                                                  (null)
                                                 )
                                                 (next s)
                                                )
                                               )
                                               (never)
                                              )
                                              (canon peer $status_test  #status_result_canon)
                                             )
                                            )
                                            (match #status_result_canon.$.[0]! "ok"
                                             (xor
                                              (seq
                                               (seq
                                                (fold info.$.external_addresses! a-1
                                                 (seq
                                                  (ap a-1 $n_addresses)
                                                  (next a-1)
                                                 )
                                                )
                                                (call peer ("exp other" "newNodeInfo") [n_info.$.node_version! n_info.$.air_version!] $versions)
                                               )
                                               (ap n-0 $tested_connections)
                                              )
                                              (seq
                                               (seq
                                                (call -relay- ("op" "noop") [])
                                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                               )
                                               (call -relay- ("op" "noop") [])
                                              )
                                             )
                                            )
                                           )
                                           (seq
                                            (seq
                                             (ap false $public_peer)
                                             (call peer ("peer" "get_contact") [n-0] contact)
                                            )
                                            (xor
                                             (mismatch contact []
                                              (fold contact.$.[0].addresses! a-2
                                               (seq
                                                (ap a-2 $n_addresses)
                                                (next a-2)
                                               )
                                              )
                                             )
                                             (call peer ("op" "noop") [])
                                            )
                                           )
                                          )
                                         )
                                         (par
                                          (par
                                           (canon peer $public_peer  #public_peer_canon)
                                           (canon peer $n_addresses  #n_addresses_canon)
                                          )
                                          (canon peer $versions  #versions_canon)
                                         )
                                        )
                                        (call peer ("exp other" "newPeerObject") [n-0 #public_peer_canon #n_addresses_canon [] [] #versions_canon] $nbh)
                                       )
                                      )
                                     )
                                    )
                                    (next n-0)
                                   )
                                  )
                                 )
                                 (call -relay- ("op" "noop") [])
                                )
                                (seq
                                 (call -relay- ("op" "noop") [])
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                )
                               )
                              )
                              (par
                               (par
                                (canon %init_peer_id% $public_peer  #public_peer_canon-0)
                                (canon %init_peer_id% $addresses  #addresses_canon)
                               )
                               (canon %init_peer_id% $tested_connections  #tested_connections_canon)
                              )
                             )
                             (call %init_peer_id% ("exp" "newPeerObject") [peer #public_peer_canon-0 #addresses_canon neighbors #tested_connections_canon []] $po)
                            )
                           )
                           (canon %init_peer_id% $po  #po-fix)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (seq
                        (par
                         (ap #po-fix.$.[0]! po-fix_flatten)
                         (canon %init_peer_id% $nbh  #nbh_canon)
                        )
                        (call %init_peer_id% ("callbackSrv" "response") [po-fix_flatten #nbh_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "explore",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "PeerObject",
                    "fields" : {
                        "public_peer" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "bool"
                            }
                        },
                        "neighbors" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "tested_connections" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "versions" : {
                            "tag" : "option",
                            "type" : {
                                "tag" : "struct",
                                "name" : "NodeInfo",
                                "fields" : {
                                    "air_version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "node_version" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        },
                        "peerId" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "PeerObject",
                        "fields" : {
                            "public_peer" : {
                                "tag" : "option",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "bool"
                                }
                            },
                            "neighbors" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "tested_connections" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "addresses" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "versions" : {
                                "tag" : "option",
                                "type" : {
                                    "tag" : "struct",
                                    "name" : "NodeInfo",
                                    "fields" : {
                                        "air_version" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "node_version" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                }
                            },
                            "peerId" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function isConnected(
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function isConnected(
    peer: FluencePeer,
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<boolean>;

export function isConnected(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                         )
                         (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call relay ("peer" "is_connected") [peer] c)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [c])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "isConnected",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "bool"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type CdbConnectArgServer_config = { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; } 
export type CdbConnectResult = { aud: string; pid: string; port: string; }
export function cdbConnect(
    peer_id: string,
    service_id: string,
    cap: string,
    server_config: CdbConnectArgServer_config,
    config?: {ttl?: number}
): Promise<CdbConnectResult>;

export function cdbConnect(
    peer: FluencePeer,
    peer_id: string,
    service_id: string,
    cap: string,
    server_config: CdbConnectArgServer_config,
    config?: {ttl?: number}
): Promise<CdbConnectResult>;

export function cdbConnect(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "cap") [] cap)
                         )
                         (call %init_peer_id% ("getDataSrv" "server_config") [] server_config)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id (service_id "connect") [cap server_config] c)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [c])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbConnect",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cap" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "server_config" : {
                    "tag" : "struct",
                    "name" : "CdbServerConfig",
                    "fields" : {
                        "ceramic_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "composedb_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "express_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "readonly_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CdbConnection",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type CdbMutateArgConnection = { aud: string; pid: string; port: string; }
export type CdbMutateArgServer_config = { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; } 
export type CdbMutateResult = { stderr: string; stdout: string; }
export function cdbMutate(
    node: string,
    service_id: string,
    display_name: string,
    cap: string,
    connection: CdbMutateArgConnection,
    server_config: CdbMutateArgServer_config,
    config?: {ttl?: number}
): Promise<CdbMutateResult>;

export function cdbMutate(
    peer: FluencePeer,
    node: string,
    service_id: string,
    display_name: string,
    cap: string,
    connection: CdbMutateArgConnection,
    server_config: CdbMutateArgServer_config,
    config?: {ttl?: number}
): Promise<CdbMutateResult>;

export function cdbMutate(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "node") [] node)
                             )
                             (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                            )
                            (call %init_peer_id% ("getDataSrv" "display_name") [] display_name)
                           )
                           (call %init_peer_id% ("getDataSrv" "cap") [] cap)
                          )
                          (call %init_peer_id% ("getDataSrv" "connection") [] connection)
                         )
                         (call %init_peer_id% ("getDataSrv" "server_config") [] server_config)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "mutate") [display_name cap connection server_config] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbMutate",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "display_name" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cap" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "connection" : {
                    "tag" : "struct",
                    "name" : "CdbConnection",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "server_config" : {
                    "tag" : "struct",
                    "name" : "CdbServerConfig",
                    "fields" : {
                        "ceramic_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "composedb_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "express_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "readonly_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type TileCreateResult = { ret_code: number; stderr: string; stdout: string; }
export function tileCreate(
    node: string,
    service_id: string,
    ceramic_url: string,
    seed: string,
    content: string,
    config?: {ttl?: number}
): Promise<TileCreateResult>;

export function tileCreate(
    peer: FluencePeer,
    node: string,
    service_id: string,
    ceramic_url: string,
    seed: string,
    content: string,
    config?: {ttl?: number}
): Promise<TileCreateResult>;

export function tileCreate(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (call %init_peer_id% ("getDataSrv" "node") [] node)
                            )
                            (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                          )
                          (call %init_peer_id% ("getDataSrv" "seed") [] seed)
                         )
                         (call %init_peer_id% ("getDataSrv" "content") [] content)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "glaze_tile_create") [seed ceramic_url content] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "tileCreate",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "seed" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "content" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "ret_code" : {
                            "tag" : "scalar",
                            "name" : "i32"
                        },
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type GetPeerInfoResult = { air_version: string; external_addresses: string[]; node_version: string; }
export function getPeerInfo(
    peer_: string,
    config?: {ttl?: number}
): Promise<GetPeerInfoResult>;

export function getPeerInfo(
    peer: FluencePeer,
    peer_: string,
    config?: {ttl?: number}
): Promise<GetPeerInfoResult>;

export function getPeerInfo(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer ("peer" "identify") [] info)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [info])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getPeerInfo",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Info",
                    "fields" : {
                        "air_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "external_addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "node_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type TileContentResult = { ret_code: number; stderr: string; stdout: string; }
export function tileContent(
    node: string,
    service_id: string,
    ceramic_url: string,
    streamId: string,
    config?: {ttl?: number}
): Promise<TileContentResult>;

export function tileContent(
    peer: FluencePeer,
    node: string,
    service_id: string,
    ceramic_url: string,
    streamId: string,
    config?: {ttl?: number}
): Promise<TileContentResult>;

export function tileContent(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "node") [] node)
                           )
                           (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                         )
                         (call %init_peer_id% ("getDataSrv" "streamId") [] streamId)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "glaze_tile_content") [streamId ceramic_url] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "tileContent",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "streamId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "ret_code" : {
                            "tag" : "scalar",
                            "name" : "i32"
                        },
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type StreamStateResult = { ret_code: number; stderr: string; stdout: string; }
export function streamState(
    node: string,
    service_id: string,
    ceramic_url: string,
    streamId: string,
    config?: {ttl?: number}
): Promise<StreamStateResult>;

export function streamState(
    peer: FluencePeer,
    node: string,
    service_id: string,
    ceramic_url: string,
    streamId: string,
    config?: {ttl?: number}
): Promise<StreamStateResult>;

export function streamState(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "node") [] node)
                           )
                           (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                         )
                         (call %init_peer_id% ("getDataSrv" "streamId") [] streamId)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "glaze_stream_state") [streamId ceramic_url] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "streamState",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "streamId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "ret_code" : {
                            "tag" : "scalar",
                            "name" : "i32"
                        },
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbTestResult = { stderr: string; stdout: string; }
export function cdbTest(
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbTestResult>;

export function cdbTest(
    peer: FluencePeer,
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbTestResult>;

export function cdbTest(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "test") [] c)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [c])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbTest",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbContratorDetailsResult = { eth_address: string; middleware: { composedb: { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; }; }; public_encryption_key: string; }
export function cdbContratorDetails(
    peer_id: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbContratorDetailsResult>;

export function cdbContratorDetails(
    peer: FluencePeer,
    peer_id: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbContratorDetailsResult>;

export function cdbContratorDetails(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id (service_id "getContractorDetails") [] getContractorDetails)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [getContractorDetails])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbContratorDetails",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CdbContractorDetails",
                    "fields" : {
                        "eth_address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "middleware" : {
                            "tag" : "struct",
                            "name" : "CdbMiddleware",
                            "fields" : {
                                "composedb" : {
                                    "tag" : "struct",
                                    "name" : "CdbServerConfig",
                                    "fields" : {
                                        "ceramic_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "ceramic_sidecar" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "composedb_sidecar" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "express_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "readonly_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                }
                            }
                        },
                        "public_encryption_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type DidNewResult = { ret_code: number; stderr: string; stdout: string; }
export function didNew(
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<DidNewResult>;

export function didNew(
    peer: FluencePeer,
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<DidNewResult>;

export function didNew(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "glaze_did_create") [] answer)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [answer])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "didNew",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "ret_code" : {
                            "tag" : "scalar",
                            "name" : "i32"
                        },
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type IdentifyViaResult = [string, { air_version: string; external_addresses: string[]; node_version: string; } | null]
export function identifyVia(
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<IdentifyViaResult>;

export function identifyVia(
    peer: FluencePeer,
    relay: string,
    peer_: string,
    config?: {ttl?: number}
): Promise<IdentifyViaResult>;

export function identifyVia(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                        )
                        (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                       )
                       (new $res
                        (seq
                         (new $status
                          (seq
                           (par
                            (seq
                             (seq
                              (call -relay- ("op" "noop") [])
                              (call relay ("op" "noop") [])
                             )
                             (xor
                              (seq
                               (seq
                                (seq
                                 (call peer ("peer" "identify") [] $res)
                                 (ap "ok" $status)
                                )
                                (call relay ("op" "noop") [])
                               )
                               (call -relay- ("op" "noop") [])
                              )
                              (seq
                               (seq
                                (call relay ("op" "noop") [])
                                (call -relay- ("op" "noop") [])
                               )
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                             )
                            )
                            (call %init_peer_id% ("peer" "timeout") [5000 "timeout"] $status)
                           )
                           (canon %init_peer_id% $status  #status-fix)
                          )
                         )
                         (canon %init_peer_id% $res  #res-fix)
                        )
                       )
                      )
                      (xor
                       (seq
                        (ap #status-fix.$.[0]! status-fix_flatten)
                        (call %init_peer_id% ("callbackSrv" "response") [status-fix_flatten #res-fix])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "identifyVia",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                },
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "struct",
                        "name" : "Info",
                        "fields" : {
                            "air_version" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "external_addresses" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "node_version" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type StreamCommitsResult = { ret_code: number; stderr: string; stdout: string; }
export function streamCommits(
    node: string,
    service_id: string,
    ceramic_url: string,
    streamId: string,
    config?: {ttl?: number}
): Promise<StreamCommitsResult>;

export function streamCommits(
    peer: FluencePeer,
    node: string,
    service_id: string,
    ceramic_url: string,
    streamId: string,
    config?: {ttl?: number}
): Promise<StreamCommitsResult>;

export function streamCommits(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "node") [] node)
                           )
                           (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                         )
                         (call %init_peer_id% ("getDataSrv" "streamId") [] streamId)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "glaze_stream_commits") [streamId ceramic_url] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "streamCommits",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "streamId" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "ret_code" : {
                            "tag" : "scalar",
                            "name" : "i32"
                        },
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbStoreKeyResult = { stderr: string; stdout: string; }
export function cdbStoreKey(
    node: string,
    service_id: string,
    ethAddress: string,
    encryptedString: string,
    encryptedSymmetricKey: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbStoreKeyResult>;

export function cdbStoreKey(
    peer: FluencePeer,
    node: string,
    service_id: string,
    ethAddress: string,
    encryptedString: string,
    encryptedSymmetricKey: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbStoreKeyResult>;

export function cdbStoreKey(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "node") [] node)
                             )
                             (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                            )
                            (call %init_peer_id% ("getDataSrv" "ethAddress") [] ethAddress)
                           )
                           (call %init_peer_id% ("getDataSrv" "encryptedString") [] encryptedString)
                          )
                          (call %init_peer_id% ("getDataSrv" "encryptedSymmetricKey") [] encryptedSymmetricKey)
                         )
                         (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "storeKey") [ethAddress encryptedString encryptedSymmetricKey ceramic_url] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbStoreKey",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ethAddress" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "encryptedString" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "encryptedSymmetricKey" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getNeighborhood(
    relay: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getNeighborhood(
    peer: FluencePeer,
    relay: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getNeighborhood(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "relay") [] relay)
                       )
                       (new $connectedPeers
                        (new $already_hashed
                         (new $count
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (seq
                             (seq
                              (seq
                               (ap 64 $count)
                               (par
                                (canon relay $already_hashed  #already_hashed_canon)
                                (canon relay $count  #count_canon)
                               )
                              )
                              (call relay ("kad" "neighborhood") [relay #already_hashed_canon #count_canon] peers)
                             )
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [peers])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getNeighborhood",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "relay" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type CdbQueryArgServer_config = { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; } 
export type CdbQueryResult = { stderr: string; stdout: string; }
export function cdbQuery(
    node: string,
    service_id: string,
    server_config: CdbQueryArgServer_config,
    config?: {ttl?: number}
): Promise<CdbQueryResult>;

export function cdbQuery(
    peer: FluencePeer,
    node: string,
    service_id: string,
    server_config: CdbQueryArgServer_config,
    config?: {ttl?: number}
): Promise<CdbQueryResult>;

export function cdbQuery(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "server_config") [] server_config)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "query") [server_config] ref)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [ref])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbQuery",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "server_config" : {
                    "tag" : "struct",
                    "name" : "CdbServerConfig",
                    "fields" : {
                        "ceramic_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "composedb_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "express_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "readonly_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function listServices(
    peer_: string,
    config?: {ttl?: number}
): Promise<{ blueprint_id: string; id: string; owner_id: string; }[]>;

export function listServices(
    peer: FluencePeer,
    peer_: string,
    config?: {ttl?: number}
): Promise<{ blueprint_id: string; id: string; owner_id: string; }[]>;

export function listServices(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer ("srv" "list") [] list)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [list])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "listServices",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "Service",
                        "fields" : {
                            "blueprint_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "owner_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getContact(
    source: string,
    target: string,
    config?: {ttl?: number}
): Promise<{ addresses: string[]; peer_id: string; } | null>;

export function getContact(
    peer: FluencePeer,
    source: string,
    target: string,
    config?: {ttl?: number}
): Promise<{ addresses: string[]; peer_id: string; } | null>;

export function getContact(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "source") [] source)
                         )
                         (call %init_peer_id% ("getDataSrv" "target") [] target)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call source ("peer" "get_contact") [target] c)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [c])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getContact",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "source" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "target" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "struct",
                        "name" : "Contact",
                        "fields" : {
                            "addresses" : {
                                "tag" : "array",
                                "type" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            },
                            "peer_id" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type GetRecordsResult = [{ metadata: { issued_by: string; issuer_signature: number[]; key_id: string; peer_id: string; relay_id: string[]; service_id: string[]; solution: number[]; timestamp_issued: number; value: string; }; signature: number[]; timestamp_created: number; }[] | null, string[]]
export function getRecords(
    resource_id: string,
    consistency_level: number,
    config?: {ttl?: number}
): Promise<GetRecordsResult>;

export function getRecords(
    peer: FluencePeer,
    resource_id: string,
    consistency_level: number,
    config?: {ttl?: number}
): Promise<GetRecordsResult>;

export function getRecords(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "resource_id") [] resource_id)
                        )
                        (call %init_peer_id% ("getDataSrv" "consistency_level") [] consistency_level)
                       )
                       (new $records
                        (new $successful
                         (new $result
                          (seq
                           (xor
                            (seq
                             (seq
                              (seq
                               (seq
                                (call -relay- ("op" "string_to_b58") [resource_id] k)
                                (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                               )
                               (par
                                (fold nodes n-0
                                 (par
                                  (seq
                                   (xor
                                    (xor
                                     (seq
                                      (seq
                                       (call n-0 ("peer" "timestamp_sec") [] t)
                                       (call n-0 ("registry" "get_records") [resource_id t] get_result)
                                      )
                                      (xor
                                       (match get_result.$.success! true
                                        (seq
                                         (ap get_result.$.result! $records)
                                         (ap true $successful)
                                        )
                                       )
                                       (ap get_result.$.error! $error-0)
                                      )
                                     )
                                     (call n-0 ("op" "noop") [])
                                    )
                                    (seq
                                     (call -relay- ("op" "noop") [])
                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                    )
                                   )
                                   (call -relay- ("op" "noop") [])
                                  )
                                  (next n-0)
                                 )
                                 (never)
                                )
                                (null)
                               )
                              )
                              (new $status
                               (new $result-0
                                (seq
                                 (seq
                                  (seq
                                   (par
                                    (seq
                                     (seq
                                      (call -relay- ("math" "sub") [consistency_level 1] sub)
                                      (new $successful_test
                                       (seq
                                        (fold $successful s
                                         (seq
                                          (seq
                                           (seq
                                            (call -relay- ("math" "add") [sub 1] incr_idx)
                                            (ap s $successful_test)
                                           )
                                           (canon -relay- $successful_test  #successful_iter_canon)
                                          )
                                          (xor
                                           (match #successful_iter_canon.length incr_idx
                                            (null)
                                           )
                                           (next s)
                                          )
                                         )
                                         (never)
                                        )
                                        (canon -relay- $successful_test  #successful_result_canon)
                                       )
                                      )
                                     )
                                     (ap "ok" $status)
                                    )
                                    (call -relay- ("peer" "timeout") [6000 "timeout"] $status)
                                   )
                                   (new $status_test
                                    (seq
                                     (fold $status s
                                      (seq
                                       (seq
                                        (seq
                                         (call -relay- ("math" "add") [0 1] incr_idx)
                                         (ap s $status_test)
                                        )
                                        (canon -relay- $status_test  #status_iter_canon)
                                       )
                                       (xor
                                        (match #status_iter_canon.length incr_idx
                                         (null)
                                        )
                                        (next s)
                                       )
                                      )
                                      (never)
                                     )
                                     (canon -relay- $status_test  #status_result_canon)
                                    )
                                   )
                                  )
                                  (xor
                                   (match #status_result_canon.$.[0]! "ok"
                                    (ap true $result-0)
                                   )
                                   (ap false $result-0)
                                  )
                                 )
                                 (canon -relay- $result-0  #result-fix-0)
                                )
                               )
                              )
                             )
                             (xor
                              (match #result-fix-0.$.[0]! false
                               (ap "timeout exceeded" $error-0)
                              )
                              (seq
                               (seq
                                (canon -relay- $records  #records_canon)
                                (call -relay- ("registry" "merge") [#records_canon] merged)
                               )
                               (xor
                                (match merged.$.success! false
                                 (ap merged.$.error! $error-0)
                                )
                                (ap merged.$.result! $result)
                               )
                              )
                             )
                            )
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                           )
                           (canon %init_peer_id% $result  #result-fix)
                          )
                         )
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $error-0  #error-0_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#result-fix #error-0_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "getRecords",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "resource_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "consistency_level" : {
                    "tag" : "scalar",
                    "name" : "i16"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "option",
                    "type" : {
                        "tag" : "array",
                        "type" : {
                            "tag" : "struct",
                            "name" : "Record",
                            "fields" : {
                                "metadata" : {
                                    "tag" : "struct",
                                    "name" : "RecordMetadata",
                                    "fields" : {
                                        "relay_id" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        },
                                        "issued_by" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "peer_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "timestamp_issued" : {
                                            "tag" : "scalar",
                                            "name" : "u64"
                                        },
                                        "service_id" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        },
                                        "value" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "key_id" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "solution" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "u8"
                                            }
                                        },
                                        "issuer_signature" : {
                                            "tag" : "array",
                                            "type" : {
                                                "tag" : "scalar",
                                                "name" : "u8"
                                            }
                                        }
                                    }
                                },
                                "signature" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "scalar",
                                        "name" : "u8"
                                    }
                                },
                                "timestamp_created" : {
                                    "tag" : "scalar",
                                    "name" : "u64"
                                }
                            }
                        }
                    }
                },
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "scalar",
                        "name" : "string"
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type IdentifyResult = { air_version: string; external_addresses: string[]; node_version: string; }
export function identify(
    peer_: string,
    config?: {ttl?: number}
): Promise<IdentifyResult>;

export function identify(
    peer: FluencePeer,
    peer_: string,
    config?: {ttl?: number}
): Promise<IdentifyResult>;

export function identify(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer ("peer" "identify") [] i)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [i])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "identify",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Info",
                    "fields" : {
                        "air_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "external_addresses" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            }
                        },
                        "node_version" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
