/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-363
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

// Functions
 

export function deploy_service_on(
    peer_: string,
    file_path: string,
    config?: {ttl?: number}
): Promise<void>;

export function deploy_service_on(
    peer: FluencePeer,
    peer_: string,
    file_path: string,
    config?: {ttl?: number}
): Promise<void>;

export function deploy_service_on(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "peer") [] peer)
                       )
                       (call %init_peer_id% ("getDataSrv" "file_path") [] file_path)
                      )
                      (new $max_heap_size
                       (new $mem_page_count
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("aqua-ipfs" "connect") [peer])
                           (call %init_peer_id% ("aqua-ipfs" "put") [file_path] ipfs_res)
                          )
                          (call -relay- ("op" "noop") [])
                         )
                         (xor
                          (seq
                           (seq
                            (seq
                             (call peer ("aqua-ipfs" "get") [ipfs_res.$.hash!] res)
                             (ap 100 $mem_page_count)
                            )
                            (ap "100000000" $max_heap_size)
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (seq
                           (call -relay- ("op" "noop") [])
                           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                          )
                         )
                        )
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "deploy_service_on",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "file_path" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "nil"
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
