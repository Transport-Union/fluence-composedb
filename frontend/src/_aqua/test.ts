/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.8.0-368
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface GraphQlSrvDef {
    addIntermediary: (callParams: CallParams$$<null>) => string | Promise<string>;
    addKey: (callParams: CallParams$$<null>) => string | Promise<string>;
    byDid: (did: string, callParams: CallParams$$<'did'>) => string | Promise<string>;
    has_intermediary: (user_address: string, callParams: CallParams$$<'user_address'>) => { aud: string; did: string; iss: string; keys: { encrypted_key: string; recipient: string; }[]; } | Promise<{ aud: string; did: string; iss: string; keys: { encrypted_key: string; recipient: string; }[]; }>;
    intermediaries: (callParams: CallParams$$<null>) => string | Promise<string>;
    keys: (callParams: CallParams$$<null>) => string | Promise<string>;
}
export function registerGraphQlSrv(service: GraphQlSrvDef): void;
export function registerGraphQlSrv(serviceId: string, service: GraphQlSrvDef): void;
export function registerGraphQlSrv(peer: FluencePeer, service: GraphQlSrvDef): void;
export function registerGraphQlSrv(peer: FluencePeer, serviceId: string, service: GraphQlSrvDef): void;
       

export function registerGraphQlSrv(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "GraphQlSrv",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "addIntermediary" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "addKey" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "byDid" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "did" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "has_intermediary" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "user_address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CdbIntermediary",
                            "fields" : {
                                "aud" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "did" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "iss" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "keys" : {
                                    "tag" : "array",
                                    "type" : {
                                        "tag" : "struct",
                                        "name" : "CdbKey",
                                        "fields" : {
                                            "encrypted_key" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            },
                                            "recipient" : {
                                                "tag" : "scalar",
                                                "name" : "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "intermediaries" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            },
            "keys" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
 

export function canConnect(
    peer_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function canConnect(
    peer: FluencePeer,
    peer_id: string,
    config?: {ttl?: number}
): Promise<string>;

export function canConnect(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                       )
                       (new $msg
                        (seq
                         (seq
                          (seq
                           (seq
                            (call -relay- ("op" "noop") [])
                            (ap "hi" $msg)
                           )
                           (call -relay- ("op" "noop") [])
                          )
                          (new $msg_test
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("math" "add") [0 1] msg_incr)
                              (fold $msg s
                               (seq
                                (seq
                                 (ap s $msg_test)
                                 (canon %init_peer_id% $msg_test  #msg_iter_canon)
                                )
                                (xor
                                 (match #msg_iter_canon.length msg_incr
                                  (null)
                                 )
                                 (next s)
                                )
                               )
                               (never)
                              )
                             )
                             (canon %init_peer_id% $msg_test  #msg_result_canon)
                            )
                            (ap #msg_result_canon msg_gate)
                           )
                          )
                         )
                         (ap msg_gate.$.[0]! msg_gate-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [msg_gate-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "canConnect",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "scalar",
                    "name" : "string"
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type QueryResult = { aud: string; did: string; iss: string; keys: { encrypted_key: string; recipient: string; }[]; }
export function query(
    peer_id: string,
    config?: {ttl?: number}
): Promise<QueryResult>;

export function query(
    peer: FluencePeer,
    peer_id: string,
    config?: {ttl?: number}
): Promise<QueryResult>;

export function query(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                       )
                       (new $msg
                        (seq
                         (seq
                          (seq
                           (call -relay- ("op" "noop") [])
                           (xor
                            (seq
                             (call peer_id ("372edb4f-b041-4cad-b6d5-47b0748a5cef" "has_intermediary") ["0x5aA88A6a1aD8F4a71Dc5A4E5946239984f36e877"] $msg)
                             (call -relay- ("op" "noop") [])
                            )
                            (seq
                             (call -relay- ("op" "noop") [])
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                            )
                           )
                          )
                          (new $msg_test
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("math" "add") [0 1] msg_incr)
                              (fold $msg s
                               (seq
                                (seq
                                 (ap s $msg_test)
                                 (canon %init_peer_id% $msg_test  #msg_iter_canon)
                                )
                                (xor
                                 (match #msg_iter_canon.length msg_incr
                                  (null)
                                 )
                                 (next s)
                                )
                               )
                               (never)
                              )
                             )
                             (canon %init_peer_id% $msg_test  #msg_result_canon)
                            )
                            (ap #msg_result_canon msg_gate)
                           )
                          )
                         )
                         (ap msg_gate.$.[0]! msg_gate-0)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [msg_gate-0])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "query",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CdbIntermediary",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "did" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "iss" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "keys" : {
                            "tag" : "array",
                            "type" : {
                                "tag" : "struct",
                                "name" : "CdbKey",
                                "fields" : {
                                    "encrypted_key" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    },
                                    "recipient" : {
                                        "tag" : "scalar",
                                        "name" : "string"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
