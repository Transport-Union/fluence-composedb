/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-363
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams$$ } from '@fluencelabs/fluence/dist/internal/compilerSupport/v4'
import {
    callFunction$$,
    registerService$$,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v4';


// Services

export interface ComposeDBSrvDef {
    authenticate: (composite_name: string, pk: string, port: string, ceramic_url: string, callParams: CallParams$$<'composite_name' | 'pk' | 'port' | 'ceramic_url'>) => { aud: string; pid: string; port: string; } | Promise<{ aud: string; pid: string; port: string; }>;
    connect: (cap: string, server_config: { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; }, callParams: CallParams$$<'cap' | 'server_config'>) => { aud: string; pid: string; port: string; } | Promise<{ aud: string; pid: string; port: string; }>;
    create_from_schema: (composite_name: string, ceramic_url: string, callParams: CallParams$$<'composite_name' | 'ceramic_url'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    dedicate: (composite_name: string, pk: string, ceramic_url: string, callParams: CallParams$$<'composite_name' | 'pk' | 'ceramic_url'>) => { aud: string; pid: string; port: string; } | Promise<{ aud: string; pid: string; port: string; }>;
    deploy_from_composite: (url: string, callParams: CallParams$$<'url'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    deploy_from_model: (model_id: string, url: string, callParams: CallParams$$<'model_id' | 'url'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    deploy_from_schema: (composite_name: string, ceramic_url: string, callParams: CallParams$$<'composite_name' | 'ceramic_url'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    getContractorDetails: (callParams: CallParams$$<null>) => { eth_address: string; middleware: { composedb: { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; }; }; public_encryption_key: string; } | Promise<{ eth_address: string; middleware: { composedb: { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; }; }; public_encryption_key: string; }>;
    kill: (pid: string, callParams: CallParams$$<'pid'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    mutate: (display_name: string, cap: string, connection: { aud: string; pid: string; port: string; }, server_config: { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; }, callParams: CallParams$$<'display_name' | 'cap' | 'connection' | 'server_config'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    query: (server_config: { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; }, callParams: CallParams$$<'server_config'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    serve: (composite_name: string, port: string, ceramic_url: string, callParams: CallParams$$<'composite_name' | 'port' | 'ceramic_url'>) => { aud: string; pid: string; port: string; } | Promise<{ aud: string; pid: string; port: string; }>;
    storeKey: (ethAddress: string, encryptedString: string, encryptedSymmetricKey: string, ceramic_url: string, callParams: CallParams$$<'ethAddress' | 'encryptedString' | 'encryptedSymmetricKey' | 'ceramic_url'>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
    test: (callParams: CallParams$$<null>) => { stderr: string; stdout: string; } | Promise<{ stderr: string; stdout: string; }>;
}
export function registerComposeDBSrv(service: ComposeDBSrvDef): void;
export function registerComposeDBSrv(serviceId: string, service: ComposeDBSrvDef): void;
export function registerComposeDBSrv(peer: FluencePeer, service: ComposeDBSrvDef): void;
export function registerComposeDBSrv(peer: FluencePeer, serviceId: string, service: ComposeDBSrvDef): void;
       

export function registerComposeDBSrv(...args: any) {
    registerService$$(
        args,
        {
    "defaultServiceId" : "ComposeDBSrv",
    "functions" : {
        "tag" : "labeledProduct",
        "fields" : {
            "authenticate" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "composite_name" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pk" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CdbConnection",
                            "fields" : {
                                "aud" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "pid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "connect" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "cap" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "server_config" : {
                            "tag" : "struct",
                            "name" : "CdbServerConfig",
                            "fields" : {
                                "ceramic_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "ceramic_sidecar" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "composedb_sidecar" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "express_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "readonly_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CdbConnection",
                            "fields" : {
                                "aud" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "pid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "create_from_schema" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "composite_name" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "dedicate" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "composite_name" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pk" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CdbConnection",
                            "fields" : {
                                "aud" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "pid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "deploy_from_composite" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "deploy_from_model" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "model_id" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "deploy_from_schema" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "composite_name" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "getContractorDetails" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CdbContractorDetails",
                            "fields" : {
                                "eth_address" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "middleware" : {
                                    "tag" : "struct",
                                    "name" : "CdbMiddleware",
                                    "fields" : {
                                        "composedb" : {
                                            "tag" : "struct",
                                            "name" : "CdbServerConfig",
                                            "fields" : {
                                                "ceramic_port" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "ceramic_sidecar" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "composedb_sidecar" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "express_port" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                },
                                                "readonly_port" : {
                                                    "tag" : "scalar",
                                                    "name" : "string"
                                                }
                                            }
                                        }
                                    }
                                },
                                "public_encryption_key" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "kill" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "mutate" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "display_name" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "cap" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "connection" : {
                            "tag" : "struct",
                            "name" : "CdbConnection",
                            "fields" : {
                                "aud" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "pid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        },
                        "server_config" : {
                            "tag" : "struct",
                            "name" : "CdbServerConfig",
                            "fields" : {
                                "ceramic_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "ceramic_sidecar" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "composedb_sidecar" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "express_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "readonly_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "query" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "server_config" : {
                            "tag" : "struct",
                            "name" : "CdbServerConfig",
                            "fields" : {
                                "ceramic_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "ceramic_sidecar" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "composedb_sidecar" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "express_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "readonly_port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "serve" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "composite_name" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CdbConnection",
                            "fields" : {
                                "aud" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "pid" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "port" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "storeKey" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "labeledProduct",
                    "fields" : {
                        "ethAddress" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "encryptedString" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "encryptedSymmetricKey" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_url" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            },
            "test" : {
                "tag" : "arrow",
                "domain" : {
                    "tag" : "nil"
                },
                "codomain" : {
                    "tag" : "unlabeledProduct",
                    "items" : [
                        {
                            "tag" : "struct",
                            "name" : "CeramicResult",
                            "fields" : {
                                "stderr" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                },
                                "stdout" : {
                                    "tag" : "scalar",
                                    "name" : "string"
                                }
                            }
                        }
                    ]
                }
            }
        }
    }
}
    );
}
      
// Functions
export type CdbConnectArgServer_config = { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; } 
export type CdbConnectResult = { aud: string; pid: string; port: string; }
export function cdbConnect(
    peer_id: string,
    service_id: string,
    cap: string,
    server_config: CdbConnectArgServer_config,
    config?: {ttl?: number}
): Promise<CdbConnectResult>;

export function cdbConnect(
    peer: FluencePeer,
    peer_id: string,
    service_id: string,
    cap: string,
    server_config: CdbConnectArgServer_config,
    config?: {ttl?: number}
): Promise<CdbConnectResult>;

export function cdbConnect(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "cap") [] cap)
                         )
                         (call %init_peer_id% ("getDataSrv" "server_config") [] server_config)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id (service_id "connect") [cap server_config] c)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [c])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbConnect",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cap" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "server_config" : {
                    "tag" : "struct",
                    "name" : "CdbServerConfig",
                    "fields" : {
                        "ceramic_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "composedb_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "express_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "readonly_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CdbConnection",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type CdbMutateArgConnection = { aud: string; pid: string; port: string; }
export type CdbMutateArgServer_config = { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; } 
export type CdbMutateResult = { stderr: string; stdout: string; }
export function cdbMutate(
    node: string,
    service_id: string,
    display_name: string,
    cap: string,
    connection: CdbMutateArgConnection,
    server_config: CdbMutateArgServer_config,
    config?: {ttl?: number}
): Promise<CdbMutateResult>;

export function cdbMutate(
    peer: FluencePeer,
    node: string,
    service_id: string,
    display_name: string,
    cap: string,
    connection: CdbMutateArgConnection,
    server_config: CdbMutateArgServer_config,
    config?: {ttl?: number}
): Promise<CdbMutateResult>;

export function cdbMutate(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "node") [] node)
                             )
                             (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                            )
                            (call %init_peer_id% ("getDataSrv" "display_name") [] display_name)
                           )
                           (call %init_peer_id% ("getDataSrv" "cap") [] cap)
                          )
                          (call %init_peer_id% ("getDataSrv" "connection") [] connection)
                         )
                         (call %init_peer_id% ("getDataSrv" "server_config") [] server_config)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "mutate") [display_name cap connection server_config] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbMutate",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "display_name" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "cap" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "connection" : {
                    "tag" : "struct",
                    "name" : "CdbConnection",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                "server_config" : {
                    "tag" : "struct",
                    "name" : "CdbServerConfig",
                    "fields" : {
                        "ceramic_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "composedb_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "express_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "readonly_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbTestResult = { stderr: string; stdout: string; }
export function cdbTest(
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbTestResult>;

export function cdbTest(
    peer: FluencePeer,
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbTestResult>;

export function cdbTest(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "test") [] c)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [c])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbTest",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbContratorDetailsResult = { eth_address: string; middleware: { composedb: { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; }; }; public_encryption_key: string; }
export function cdbContratorDetails(
    peer_id: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbContratorDetailsResult>;

export function cdbContratorDetails(
    peer: FluencePeer,
    peer_id: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbContratorDetailsResult>;

export function cdbContratorDetails(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "peer_id") [] peer_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call peer_id (service_id "getContractorDetails") [] getContractorDetails)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [getContractorDetails])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbContratorDetails",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "peer_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CdbContractorDetails",
                    "fields" : {
                        "eth_address" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "middleware" : {
                            "tag" : "struct",
                            "name" : "CdbMiddleware",
                            "fields" : {
                                "composedb" : {
                                    "tag" : "struct",
                                    "name" : "CdbServerConfig",
                                    "fields" : {
                                        "ceramic_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "ceramic_sidecar" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "composedb_sidecar" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "express_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        },
                                        "readonly_port" : {
                                            "tag" : "scalar",
                                            "name" : "string"
                                        }
                                    }
                                }
                            }
                        },
                        "public_encryption_key" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbServeResult = [{ stderr: string; stdout: string; }, { aud: string; pid: string; port: string; }]
export function cdbServe(
    node: string,
    service_id: string,
    model_id: string,
    port: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbServeResult>;

export function cdbServe(
    peer: FluencePeer,
    node: string,
    service_id: string,
    model_id: string,
    port: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbServeResult>;

export function cdbServe(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (call %init_peer_id% ("getDataSrv" "node") [] node)
                            )
                            (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "model_id") [] model_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "port") [] port)
                         )
                         (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (call node (service_id "deploy_from_model") [model_id ceramic_url] ref)
                          (call node (service_id "serve") [model_id port ceramic_url] s)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [ref s])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbServe",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "model_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "port" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                {
                    "tag" : "struct",
                    "name" : "CdbConnection",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbStoreKeyResult = { stderr: string; stdout: string; }
export function cdbStoreKey(
    node: string,
    service_id: string,
    ethAddress: string,
    encryptedString: string,
    encryptedSymmetricKey: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbStoreKeyResult>;

export function cdbStoreKey(
    peer: FluencePeer,
    node: string,
    service_id: string,
    ethAddress: string,
    encryptedString: string,
    encryptedSymmetricKey: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbStoreKeyResult>;

export function cdbStoreKey(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                              (call %init_peer_id% ("getDataSrv" "node") [] node)
                             )
                             (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                            )
                            (call %init_peer_id% ("getDataSrv" "ethAddress") [] ethAddress)
                           )
                           (call %init_peer_id% ("getDataSrv" "encryptedString") [] encryptedString)
                          )
                          (call %init_peer_id% ("getDataSrv" "encryptedSymmetricKey") [] encryptedSymmetricKey)
                         )
                         (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "storeKey") [ethAddress encryptedString encryptedSymmetricKey ceramic_url] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbStoreKey",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ethAddress" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "encryptedString" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "encryptedSymmetricKey" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbCreateResult = { stderr: string; stdout: string; }
export function cdbCreate(
    node: string,
    service_id: string,
    composite_name: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbCreateResult>;

export function cdbCreate(
    peer: FluencePeer,
    node: string,
    service_id: string,
    composite_name: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbCreateResult>;

export function cdbCreate(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                            (call %init_peer_id% ("getDataSrv" "node") [] node)
                           )
                           (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "composite_name") [] composite_name)
                         )
                         (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "create_from_schema") [composite_name ceramic_url] ref)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [ref])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbCreate",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "composite_name" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbServeKeystoreResult = [{ stderr: string; stdout: string; }, { aud: string; pid: string; port: string; }, { aud: string; pid: string; port: string; }]
export function cdbServeKeystore(
    node: string,
    service_id: string,
    composite_name: string,
    port: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbServeKeystoreResult>;

export function cdbServeKeystore(
    peer: FluencePeer,
    node: string,
    service_id: string,
    composite_name: string,
    port: string,
    ceramic_url: string,
    config?: {ttl?: number}
): Promise<CdbServeKeystoreResult>;

export function cdbServeKeystore(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                             (call %init_peer_id% ("getDataSrv" "node") [] node)
                            )
                            (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                           )
                           (call %init_peer_id% ("getDataSrv" "composite_name") [] composite_name)
                          )
                          (call %init_peer_id% ("getDataSrv" "port") [] port)
                         )
                         (call %init_peer_id% ("getDataSrv" "ceramic_url") [] ceramic_url)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (seq
                          (seq
                           (call node (service_id "deploy_from_schema") [composite_name ceramic_url] ref)
                           (call node (service_id "serve") [composite_name port ceramic_url] s)
                          )
                          (call node (service_id "authenticate") [composite_name "" "5500" ceramic_url] auth)
                         )
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [ref s auth])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbServeKeystore",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "composite_name" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "port" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "ceramic_url" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                {
                    "tag" : "struct",
                    "name" : "CdbConnection",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                },
                {
                    "tag" : "struct",
                    "name" : "CdbConnection",
                    "fields" : {
                        "aud" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "pid" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

export type CdbQueryArgServer_config = { ceramic_port: string; ceramic_sidecar: string; composedb_sidecar: string; express_port: string; readonly_port: string; } 
export type CdbQueryResult = { stderr: string; stdout: string; }
export function cdbQuery(
    node: string,
    service_id: string,
    server_config: CdbQueryArgServer_config,
    config?: {ttl?: number}
): Promise<CdbQueryResult>;

export function cdbQuery(
    peer: FluencePeer,
    node: string,
    service_id: string,
    server_config: CdbQueryArgServer_config,
    config?: {ttl?: number}
): Promise<CdbQueryResult>;

export function cdbQuery(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "node") [] node)
                          )
                          (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                         )
                         (call %init_peer_id% ("getDataSrv" "server_config") [] server_config)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "query") [server_config] ref)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [ref])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbQuery",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "server_config" : {
                    "tag" : "struct",
                    "name" : "CdbServerConfig",
                    "fields" : {
                        "ceramic_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "ceramic_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "composedb_sidecar" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "express_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "readonly_port" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type CdbKillResult = { stderr: string; stdout: string; }
export function cdbKill(
    pid: string,
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbKillResult>;

export function cdbKill(
    peer: FluencePeer,
    pid: string,
    node: string,
    service_id: string,
    config?: {ttl?: number}
): Promise<CdbKillResult>;

export function cdbKill(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "pid") [] pid)
                          )
                          (call %init_peer_id% ("getDataSrv" "node") [] node)
                         )
                         (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call node (service_id "kill") [pid] res2)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res2])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction$$(
        args,
        {
    "functionName" : "cdbKill",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "pid" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "node" : {
                    "tag" : "scalar",
                    "name" : "string"
                },
                "service_id" : {
                    "tag" : "scalar",
                    "name" : "string"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "CeramicResult",
                    "fields" : {
                        "stderr" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "stdout" : {
                            "tag" : "scalar",
                            "name" : "string"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
