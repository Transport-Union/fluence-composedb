type TU_Key @entity  {
    did: String! 
    recipient: String! 
    intermediary: String!
    encrypted_key: String! 
}

type TU_Intermediary {
    id: String!
    aud: String!
    did: String!
    iss: String!
    keys: TU_KeyConnection
}

type TU_KeyConnection @entity {
    edges: [TU_KeyEdge]
}

type TU_KeyEdge  @entity{
    node:TU_Key
}

type TU_IntermediaryConnection @entity {
    edges: [TU_IntermediaryEdge]
}

type TU_IntermediaryEdge @entity {
    node: TU_Intermediary
}



type Mutation {
    createTU_Key: CreateTU_KeyPayload
    createTU_Intermediary: CreateTU_IntermediaryPayload
}

type CreateTU_KeyPayload @entity {
    input: TU_KeyInput
    document: TU_Key
}

type TU_KeyInput @entity {
    content: TU_Key
}

type CreateTU_IntermediaryPayload @entity {
    input: TU_IntermediaryInput
    document: TU_Intermediary
}

type TU_IntermediaryInput @entity {
    content: TU_Intermediary
}



